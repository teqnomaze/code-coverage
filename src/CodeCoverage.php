<?php
/**
 * The CodeCoverage class file.
 *
 * @package Teqnomaze\Coverage
 * @author  Musthafa SM <musthafasm@gmail.com>
 */

declare(strict_types=1);

namespace Teqnomaze\Coverage;

/**
 * The CodeCoverage class.
 */
class CodeCoverage
{
    /**
     * The location of `clover.xml` file, that's generated by phpunit.
     *
     * @var string $clover
     */
    private $clover;

    /**
     * The coverage threshold percentage that's acceptable (Min = 1, Max = 100).
     *
     * @var integer $threshold
     */
    private $threshold;

    /**
     * The coverage output message.
     *
     * @var string|null $message
     */
    private $message;

    /**
     * The coverage test passed.
     *
     * @var boolean $passed
     */
    private $passed = false;

    /**
     * Initiate class object with default parameters.
     *
     * @param string  $clover    The clover.xml file path.
     * @param integer $threshold The coverage threshold percentage.
     */
    public function __construct(string $clover = '', int $threshold = 80)
    {

        $this->setClover($clover);
        $this->setThreshold($threshold);
    }

    /**
     * Run the coverage check.
     *
     * @return self
     * @throws \InvalidArgumentException Throws file not found exception.
     */
    public function check(): self
    {

        $clover = $this->getClover();

        if (empty($clover) || !file_exists($clover)) {
            throw new \InvalidArgumentException('Clover file not found!');
        }

        $metrics = (new \SimpleXMLElement(file_get_contents($clover)))->xpath('//metrics');
        $total = 0;
        $checked = 0;

        foreach ($metrics as $metric) {
            $total += (int) $metric['elements'];
            $checked += (int) $metric['coveredelements'];
        }

        $percentage = min(100, max(0, $this->getThreshold()));
        $coverage = round(($checked / $total) * 100);

        if ($coverage >= $percentage) {
            $status = 'above';
            $this->setPassed(true);
        } else {
            $status = 'below';
            $this->setPassed(false);
        }

        $message = sprintf(
            'Code coverage is %s, which is %s the accepted %s',
            $coverage . '%',
            $status,
            $percentage . '%'
        );

        $this->setMessage($message);

        return $this;
    }

    /**
     * Output the coverage result.
     *
     * @return void
     */
    public function output(): void
    {
        if ($this->getPassed()) {
            echo PHP_EOL . "\033[42;37m" . $this->getMessage() . "\033[0m" . str_repeat(PHP_EOL, 2);
        } else {
            echo PHP_EOL . "\033[41;37m" . $this->getMessage() . "\033[0m" . str_repeat(PHP_EOL, 2);
        }
    }

    /**
     * Get the clover file.
     *
     * @return string
     */
    public function getClover(): string
    {
        return $this->clover;
    }

    /**
     * Set the clover file.
     *
     * @param  string $clover The clover file.
     * @return self
     */
    public function setClover(string $clover): self
    {
        $this->clover = $clover;
        return $this;
    }

    /**
     * Get the threshold value.
     *
     * @return integer
     */
    public function getThreshold(): int
    {
        return $this->threshold;
    }

    /**
     * Set the threshold value.
     *
     * @param  integer $threshold The threshold value.
     * @return self
     */
    public function setThreshold(int $threshold): self
    {
        $this->threshold = $threshold;
        return $this;
    }

    /**
     * Get the message value.
     *
     * @return string|null
     */
    public function getMessage(): ?string
    {
        return $this->message;
    }

    /**
     * Set the message value.
     *
     * @param  string $message The message value.
     * @return self
     */
    public function setMessage(string $message): self
    {
        $this->message = $message;
        return $this;
    }

    /**
     * Get the passed flag.
     *
     * @return boolean
     */
    public function getPassed(): bool
    {
        return $this->passed;
    }

    /**
     * Set the passed flag.
     *
     * @param  boolean $passed The passed flag.
     * @return self
     */
    public function setPassed(bool $passed): self
    {
        $this->passed = $passed;
        return $this;
    }
}
